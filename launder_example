#include <iostream>
#include <memory>
#include <new>
 
struct Tracer
{
    int value;
    ~Tracer() { std::cout << value << " destructed\n"; }
};
 
int main()
{
    alignas(Tracer) unsigned char buffer[sizeof(Tracer) * 8];
 
    for (int i = 0; i < 8; ++i)
        new(buffer + sizeof(Tracer) * i) Tracer{i}; //manually construct objects
 
    auto ptr = std::launder(reinterpret_cast<Tracer*>(buffer));
 
    for (int i = 0; i < 8; ++i)
        std::destroy_at(ptr + i);
}


Using launder. If we dont store pointer by new(16 line), then we must use launder to access object at address. Если присвоить значение new в переменную и далее ей пользоваться - нет проблем. Если мы заново хотим получить поинтер через, например, указатель на массив, то нужно делать launder 
